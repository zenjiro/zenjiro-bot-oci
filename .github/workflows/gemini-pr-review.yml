name: '🧐 Gemini Pull Request Review'

on:
  pull_request:
    types:
      - 'opened'
      - 'synchronize'
  pull_request_review_comment:
    types:
      - 'created'
  pull_request_review:
    types:
      - 'submitted'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: 'number'

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'read'
  id-token: 'write'
  issues: 'write'
  pull-requests: 'write'
  statuses: 'write'

jobs:
  review-pr:
    if: |-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.action == 'opened') ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request &&
        contains(github.event.comment.body, '@gemini-cli /review') &&
        (
          github.event.comment.author_association == 'OWNER' ||
          github.event.comment.author_association == 'MEMBER' ||
          github.event.comment.author_association == 'COLLABORATOR'
        )
      ) ||
      (github.event_name == 'pull_request_review_comment' &&
        contains(github.event.comment.body, '@gemini-cli /review') &&
        (
          github.event.comment.author_association == 'OWNER' ||
          github.event.comment.author_association == 'MEMBER' ||
          github.event.comment.author_association == 'COLLABORATOR'
        )
      ) ||
      (github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, '@gemini-cli /review') &&
        (
          github.event.review.author_association == 'OWNER' ||
          github.event.review.author_association == 'MEMBER' ||
          github.event.review.author_association == 'COLLABORATOR'
        )
      )
    timeout-minutes: 5
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Checkout PR code'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@v2'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v4'
        with:
          node-version: '24'
          
      - name: 'Install Gemini CLI'
        run: npm install -g @google/gemini-cli

      - name: 'Get PR details'
        id: 'get_pr'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          EVENT_NAME: '${{ github.event_name }}'
          WORKFLOW_PR_NUMBER: '${{ github.event.inputs.pr_number }}'
          PULL_REQUEST_NUMBER: '${{ github.event.pull_request.number }}'
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          COMMENT_BODY: '${{ github.event.comment.body }}'
        run: |-
          set -euo pipefail

          # Determine PR number based on event type
          if [[ "${EVENT_NAME}" = "workflow_dispatch" ]]; then
            PR_NUMBER="${WORKFLOW_PR_NUMBER}"
          elif [[ "${EVENT_NAME}" = "pull_request" ]]; then
            PR_NUMBER="${PULL_REQUEST_NUMBER}"
          else
            PR_NUMBER="${ISSUE_NUMBER}"
          fi

          echo "pr_number=${PR_NUMBER}" >> "${GITHUB_OUTPUT}"

          # Extract additional instructions from comment if present
          ADDITIONAL_INSTRUCTIONS=""
          if [[ "${EVENT_NAME}" = "issue_comment" || "${EVENT_NAME}" = "pull_request_review_comment" || "${EVENT_NAME}" = "pull_request_review" ]]; then
            ADDITIONAL_INSTRUCTIONS="$(echo "${COMMENT_BODY}" | sed 's/.*@gemini-cli \/review//' | xargs || true)"
          fi
          echo "additional_instructions=${ADDITIONAL_INSTRUCTIONS}" >> "${GITHUB_OUTPUT}"

          # Get PR details
          PR_DATA="$(gh pr view "${PR_NUMBER}" --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)"
          echo "pr_data=${PR_DATA}" >> "${GITHUB_OUTPUT}"

          # Get file changes
          CHANGED_FILES="$(gh pr diff "${PR_NUMBER}" --name-only)"
          {
            echo "changed_files<<EOF"
            echo "${CHANGED_FILES}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

          # Get diff content
          DIFF_CONTENT="$(gh pr diff "${PR_NUMBER}")"
          {
            echo "diff_content<<EOF"
            echo "${DIFF_CONTENT}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Run Gemini PR Review'
        id: 'gemini_pr_review'
        env:
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          PR_NUMBER: '${{ steps.get_pr.outputs.pr_number }}'
          PR_DATA: '${{ steps.get_pr.outputs.pr_data }}'
          CHANGED_FILES: '${{ steps.get_pr.outputs.changed_files }}'
          ADDITIONAL_INSTRUCTIONS: '${{ steps.get_pr.outputs.additional_instructions }}'
          DIFF_CONTENT: '${{ steps.get_pr.outputs.diff_content }}'
        run: |-
          set -euo pipefail
          
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "GEMINI_API_KEY is not set. Please set it as a repository secret."
            exit 1
          fi
          
          # Create a prompt for code review
          cat > final_prompt.txt << EOF
          You are an expert code reviewer. Please review the following pull request changes and provide constructive feedback.

          ## Pull Request Information
          **PR Number:** ${PR_NUMBER}
          **PR Data:** ${PR_DATA}
          **Additional Instructions:** ${ADDITIONAL_INSTRUCTIONS}

          ## Changed Files
          ${CHANGED_FILES}

          ## Code Changes (Diff)
          \`\`\`diff
          ${DIFF_CONTENT}
          \`\`\`

          ## Review Guidelines
          Please focus on:
          1. **Code Quality**: Check for best practices, readability, and maintainability
          2. **Security**: Look for potential security vulnerabilities
          3. **Performance**: Identify potential performance issues
          4. **Bugs**: Spot logical errors or potential bugs
          5. **Style**: Check adherence to coding standards
          6. **Documentation**: Ensure code is properly documented

          Please provide:
          - A summary of the changes
          - Specific feedback on issues found (if any)
          - Suggestions for improvement
          - Overall assessment (Approve/Request Changes/Comment)

          Format your response in markdown for easy reading.
          EOF
          
          # Debug: Show the prompt being sent (first 500 chars)
          echo "=== Prompt Preview ==="
          head -c 500 final_prompt.txt
          echo ""
          echo "=== End Preview ==="
          
          # Run Gemini review
          REVIEW_OUTPUT=$(gemini -p "$(cat final_prompt.txt)" 2>/dev/null || echo "Review generation failed. Please review manually.")
          
          # Save review output
          echo "review_output<<EOF" >> "${GITHUB_OUTPUT}"
          echo "${REVIEW_OUTPUT}" >> "${GITHUB_OUTPUT}"
          echo "EOF" >> "${GITHUB_OUTPUT}"

      - name: 'Post Review Comment'
        uses: 'actions/github-script@v7'
        env:
          REVIEW_OUTPUT: '${{ steps.gemini_pr_review.outputs.review_output }}'
          PR_NUMBER: '${{ steps.get_pr.outputs.pr_number }}'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            const reviewOutput = process.env.REVIEW_OUTPUT;
            const prNumber = process.env.PR_NUMBER;
            
            const comment = `## 🤖 Gemini AI Code Review

            ${reviewOutput}

            ---
            *This review was automatically generated by Gemini AI. Please use your judgment when considering the feedback.*`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(prNumber),
              body: comment
            });

      - name: 'Post PR review failure comment'
        if: |-
          ${{ failure() && steps.gemini_pr_review.outcome == 'failure' }}
        uses: 'actions/github-script@v7'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            github.rest.issues.createComment({
              owner: '${{ github.repository }}'.split('/')[0],
              repo: '${{ github.repository }}'.split('/')[1],
              issue_number: '${{ steps.get_pr.outputs.pr_number }}',
              body: 'There is a problem with the Gemini CLI PR review. Please check the [action logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })