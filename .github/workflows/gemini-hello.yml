name: 'Gemini Hello World with Code Review'

on:
  workflow_dispatch:
  push:
  pull_request:
    types:
      - opened
      - synchronize

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  hello:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
    - name: Install Gemini CLI
      run: npm install -g @google/gemini-cli
    - name: Run Gemini Hello
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "GEMINI_API_KEY is not set. Please set it as a repository secret."
          exit 1
        fi
        gemini -p hello

  code-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: hello
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Checkout main branch for comparison
      run: |
        git fetch origin main:main
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        
    - name: Install Gemini CLI
      run: npm install -g @google/gemini-cli
      
    - name: Get PR changes
      id: pr-changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get PR number
        PR_NUMBER="${{ github.event.pull_request.number }}"
        echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
        
        # Get changed files
        CHANGED_FILES=$(git diff --name-only main...HEAD)
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Get diff content
        DIFF_CONTENT=$(git diff main...HEAD)
        echo "diff_content<<EOF" >> $GITHUB_OUTPUT
        echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Get PR title and description
        PR_TITLE="${{ github.event.pull_request.title }}"
        PR_BODY="${{ github.event.pull_request.body }}"
        echo "pr_title=${PR_TITLE}" >> $GITHUB_OUTPUT
        echo "pr_body<<EOF" >> $GITHUB_OUTPUT
        echo "$PR_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Run Gemini Code Review
      id: gemini-review
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        PR_TITLE: ${{ steps.pr-changes.outputs.pr_title }}
        PR_BODY: ${{ steps.pr-changes.outputs.pr_body }}
        CHANGED_FILES: ${{ steps.pr-changes.outputs.changed_files }}
        DIFF_CONTENT: ${{ steps.pr-changes.outputs.diff_content }}
      run: |
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "GEMINI_API_KEY is not set. Please set it as a repository secret."
          exit 1
        fi
        
        # Create a prompt for code review
        cat > review_prompt.txt << 'EOF'
        You are an expert code reviewer. Please review the following pull request changes and provide constructive feedback.

        ## Pull Request Information
        **Title:** $PR_TITLE
        **Description:** $PR_BODY

        ## Changed Files
        $CHANGED_FILES

        ## Code Changes (Diff)
        ```diff
        $DIFF_CONTENT
        ```

        ## Review Guidelines
        Please focus on:
        1. **Code Quality**: Check for best practices, readability, and maintainability
        2. **Security**: Look for potential security vulnerabilities
        3. **Performance**: Identify potential performance issues
        4. **Bugs**: Spot logical errors or potential bugs
        5. **Style**: Check adherence to coding standards
        6. **Documentation**: Ensure code is properly documented

        Please provide:
        - A summary of the changes
        - Specific feedback on issues found (if any)
        - Suggestions for improvement
        - Overall assessment (Approve/Request Changes/Comment)

        Format your response in markdown for easy reading.
        EOF
        
        # Replace environment variables in the prompt
        envsubst < review_prompt.txt > final_prompt.txt
        
        # Run Gemini review
        REVIEW_OUTPUT=$(gemini -p "$(cat final_prompt.txt)")
        
        # Save review output
        echo "review_output<<EOF" >> $GITHUB_OUTPUT
        echo "$REVIEW_OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Post Review Comment
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const reviewOutput = `${{ steps.gemini-review.outputs.review_output }}`;
          
          const comment = `## ðŸ¤– Gemini AI Code Review

          ${reviewOutput}

          ---
          *This review was automatically generated by Gemini AI. Please use your judgment when considering the feedback.*`;
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: ${{ steps.pr-changes.outputs.pr_number }},
            body: comment
          });
